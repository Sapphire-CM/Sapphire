class Import::StudentImportDecorator < Draper::Decorator
  decorates :"import/student_import"

  delegate_all

  def term_title
    model.term.title
  end

  def filename
    File.basename model.file.to_s
  end

  def created_at
    h.localize model.created_at, format: :long
  end

  def students_count
    if model.imported?
      200
    else
      h.content_tag :span, "?", class: "grey"
    end
  end

  def mapping_table
    headers = model.headers
    values = model.values
    mapping = model.import_mapping

    column_count = if headers
      headers.length
    elsif values.length > 0
      values.first.length
    else
      0
    end

    h.render "import/student_imports/mapping_table", mapping: mapping, column_count: column_count, headers: headers, values: values, importable_attributes: model.class::IMPORTABLE_ATTRIBUTES, student_import: model
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   class: 'timestamp'
  #   end
end
